{"version":3,"sources":["components/WebRTCVideo.js","connectionManagers/WebRTCConnectionManager.js","tabs/WebRTCWithServerTab.js","connectionManagers/ManualWebRTCConnectionManager.js","tabs/WebRTCManualTab.js","App.js","serviceWorker.js","index.js"],"names":["WebRTCVideo","classes","this","props","react_default","a","createElement","Card_default","className","videoCard","CardContent_default","Typography_default","variant","gutterBottom","videoName","ref","videoRef","autoPlay","Component","withStyles","theme","width","heigth","ICE_CONFIGURATION","iceServers","urls","DEFAULT_SOCKET_URL","WebRTCConnectionManager","serverUrl","Object","classCallCheck","rtcConnection","RTCPeerConnection","socket","io","connect","localMediaStreamPromise","remoteMediaStreamPromise","onicecandidate","handleIceCandidate","bind","on","handleOffer","handleAnswer","handleRemoteIceCandidate","Promise","resolve","reject","navigator","getUserMedia","video","stream","Error","_this","ontrack","event","console","log","streams","getLocalMediaStream","localMediaStream","getTracks","forEach","track","_this2","addTrack","createOffer","localDescription","setLocalDescription","emit","description","concat","setRemoteDescription","_this3","createAnswer","candidate","addIceCandidate","WebRTCWithServerTab","possibleConstructorReturn","getPrototypeOf","call","state","isServerSet","rtcConnectionMngr","localVideoStream","localVideoEl","remoteVideoStream","remoteVideoEl","handleCallStart","assertThisInitialized","handleCallEnd","handleServerUrlChange","handleSetServerClick","setLocalVideoEl","setRemoteVideoEl","newText","setState","el","then","mediaStream","srcObject","getRemoteMediaStream","_this4","Grid_default","container","spacing","uiContainer","justify","alignItems","item","xs","TextField_default","label","fullWidth","value","onChange","target","doublePadded","Button_default","color","onClick","components_WebRTCVideo","renderVideoChatUIControlPanel","_this5","controlPanelBtnContainer","controlPanelBtn","Icon_default","controlPanelBtnIcon","renderVideoChatUI","renderSetServerUI","height","padding","unit","paddingRight","paddingLeft","marginLeft","localConnectionData","candidates","subscribers","Set","handler","add","delete","JSON","stringify","notifyAll","i","length","push","WebRTCManualTab","startOrAccept","isConnected","remoteConnectionData","rtcConnectionManager","ManualWebRTCConnectionManager","subscribe","handleLocalConnectionData","parse","error","direction","renderStartOrAcceptConnectionRadioGroup","offerAnswerInputContainer","renderOfferAnswerFields","renderConnectBtn","FormControl_default","component","FormLabel_default","startOrAcceptFormLabel","RadioGroup_default","row","name","handleStartOrAcceptSelection","FormControlLabel_default","control","Radio_default","disabled","_this6","_this$state","isDisabled","startOrAcceptConnectBtn","handleConnectBtnClick","_this7","_this$state2","remoteConnectionTextField","handleRemoteConnectionData","multiline","rows","margin","offerAnswerInput","localConnectionTextField","videoChatContainer","root","renderSetupConnectionUI","paddingBottom","marginBottom","createMuiTheme","palette","primary","blue","secondary","purple","TAB_OPTIONS","freeze","SERVER","MANUAL","App","currentTab","handleTabChange","CssBaseline_default","styles","AppBar_default","position","Tabs_default","Tab_default","tabs_WebRTCWithServerTab","tabs_WebRTCManualTab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83123fed.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = ((theme) => ({\n  videoCard: {\n    width: '100%',\n    heigth: '100%',\n  }\n}));\n\nclass WebRTCVideo extends Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Card className={classes.videoCard}>\n        <CardContent>\n          <Typography variant=\"h5\" gutterBottom>\n            {this.props.videoName}\n          </Typography>\n          <video ref={this.props.videoRef} autoPlay={true}></video>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(WebRTCVideo);\n","import io from 'socket.io-client';\n\nconst ICE_CONFIGURATION = {\n  iceServers: [\n    {urls: 'stun:stun.l.google.com:19302'}\n  ]\n};\n\nconst DEFAULT_SOCKET_URL = 'http://localhost:8080';\n\nexport default class WebRTCConnectionManager {\n  constructor(serverUrl) {\n    this.rtcConnection = new RTCPeerConnection(ICE_CONFIGURATION);\n    this.socket = io.connect(serverUrl || DEFAULT_SOCKET_URL);\n\n    this.localMediaStreamPromise = null;\n    this.remoteMediaStreamPromise = null;\n\n    this.rtcConnection.onicecandidate = this.handleIceCandidate.bind(this);\n\n    this.socket.on('offer', this.handleOffer.bind(this));\n    this.socket.on('answer', this.handleAnswer.bind(this));\n    this.socket.on('ice_candidate', this.handleRemoteIceCandidate.bind(this));\n    // this.socket.on('disconnect', this.handleDisconnect.bind(this));\n  }\n\n  async getLocalMediaStream() {\n    if (this.localMediaStreamPromise === null) {\n      this.localMediaStreamPromise = new Promise((resolve, reject) => {\n        navigator.getUserMedia(\n          {video: true},\n          (stream) => resolve(stream),\n          () => reject(new Error('Failed to get local media stream'))\n        );\n      });\n    }\n\n    return this.localMediaStreamPromise;\n  }\n\n  async getRemoteMediaStream() {\n    if (this.remoteMediaStreamPromise === null) {\n      this.remoteMediaStreamPromise = new Promise((resolve, reject) => {\n        this.rtcConnection.ontrack = ((event) => {\n          console.log('onRemoteTrack');\n          resolve(event.streams[0]);\n        });\n      });\n    }\n\n    return this.remoteMediaStreamPromise;\n  }\n\n  /* Initiate a call */\n  async call() {\n    // add local media stream tracks to rtc connection\n    let localMediaStream = await this.getLocalMediaStream();\n    localMediaStream.getTracks().forEach((track) => this.rtcConnection.addTrack(track, localMediaStream));\n\n    // send an offer\n    let localDescription = await this.rtcConnection.createOffer();\n    await this.rtcConnection.setLocalDescription(localDescription);\n    this.socket.emit('offer', {description: this.rtcConnection.localDescription});\n  }\n\n  /* Handle an incoming call */\n  async handleOffer({description}) {\n    console.log(`handleOffer: ${description}`);\n\n    await this.rtcConnection.setRemoteDescription(description);\n\n    // add local media stream tracks to rtc connection\n    let localMediaStream = await this.getLocalMediaStream();\n    localMediaStream.getTracks().forEach((track) => this.rtcConnection.addTrack(track, localMediaStream));\n\n    // send an answer\n    await this.rtcConnection.setLocalDescription(await this.rtcConnection.createAnswer());\n    this.socket.emit('answer', {description: this.rtcConnection.localDescription});\n  }\n\n  /* Handle an answer to our offer (if we initiated the call) */\n  async handleAnswer({description}) {\n    console.log(`handleAnswer: ${description}`);\n    await this.rtcConnection.setRemoteDescription(description);\n  }\n\n  async handleIceCandidate({candidate}) {\n    console.log(`handleIceCandidate: ${candidate}`);\n\n    if (!candidate) return;\n    this.socket.emit('ice_candidate', {candidate});\n  }\n\n  async handleRemoteIceCandidate({candidate}) {\n    console.log(`handleRemoteIceCandidate: ${candidate}`);\n\n    if (!candidate) return;\n    await this.rtcConnection.addIceCandidate(candidate);\n  }\n}\n","import React, { Component } from 'react';\n\n// material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\n\n// web rtc stuff\nimport WebRTCVideo from '../components/WebRTCVideo';\nimport WebRTCConnectionManager from '../connectionManagers/WebRTCConnectionManager';\n\nconst DEFAULT_SOCKET_URL = 'http://localhost:8080';\n\nconst styles = ((theme) => ({\n  uiContainer: {\n    height: '100%',\n    padding: '100px',\n  },\n  doublePadded: {\n    padding: theme.spacing.unit * 2,\n  },\n  controlPanelBtnContainer: {\n    paddingRight: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit,\n  },\n  controlPanelBtn: {\n    width: '100%',\n    height: '100%',\n  },\n  controlPanelBtnIcon: {\n    marginLeft: '15px'\n  },\n}));\n\nclass WebRTCWithServerTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      serverUrl: DEFAULT_SOCKET_URL,\n      isServerSet: false\n    };\n\n    this.rtcConnectionMngr = null;\n\n    // since we're using MediaStream objects need to store these as members and user refs to set the video src's\n    this.localVideoStream = null;\n    this.localVideoEl = null;\n    \n    this.remoteVideoStream = null;\n    this.remoteVideoEl = null;\n\n    this.handleCallStart = this.handleCallStart.bind(this);\n    this.handleCallEnd = this.handleCallEnd.bind(this);\n    this.handleServerUrlChange = this.handleServerUrlChange.bind(this);\n    this.handleSetServerClick = this.handleSetServerClick.bind(this);\n\n    this.setLocalVideoEl = this.setLocalVideoEl.bind(this);\n    this.setRemoteVideoEl = this.setRemoteVideoEl.bind(this);\n  }\n\n  handleServerUrlChange(newText) {\n    this.setState({serverUrl: newText});\n  }\n\n  handleSetServerClick() {\n    this.rtcConnectionMngr = new WebRTCConnectionManager(this.state.serverUrl);\n    this.setState({isServerSet: true});\n  }\n\n  handleCallStart() {\n    console.log('Call Started!');\n\n    this.rtcConnectionMngr.call();\n  }\n\n  handleCallEnd() {\n    console.log('Call Ended!');\n\n    console.log('...no it didn\\'t...');\n  }\n\n  setLocalVideoEl(el) {\n    this.localVideoEl = el;\n\n    this.rtcConnectionMngr.getLocalMediaStream()\n      .then((mediaStream) => this.localVideoStream = mediaStream)\n      .then(() => this.localVideoEl.srcObject = this.localVideoStream);\n  }\n\n  setRemoteVideoEl(el) {\n    this.remoteVideoEl = el;\n\n    this.rtcConnectionMngr.getRemoteMediaStream()\n      .then((mediaStream) => this.remoteVideoStream = mediaStream)\n      .then(() => this.remoteVideoEl.srcObject = this.remoteVideoStream);\n  }\n\n  renderSetServerUI() {\n    const { classes } = this.props;\n\n    return (\n      <Grid container spacing={12} className={classes.uiContainer} justify=\"center\" alignItems=\"stretch\">\n        <Grid item xs={4}>\n          <TextField\n            label=\"Server Url\"\n            fullWidth\n            value={this.state.serverUrl}\n            onChange={(event) => this.handleServerUrlChange(event.target.value)}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.doublePadded}>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleSetServerClick}>Connect</Button>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderVideoChatUI() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.uiContainer}>\n        <Grid container spacing={12} justify=\"center\" alignItems=\"stretch\">\n          <Grid item xs={6} className={classes.doublePadded}>\n            <WebRTCVideo videoName=\"Local\" videoRef={this.setLocalVideoEl}/>\n          </Grid>\n          <Grid item xs={6} className={classes.doublePadded}>\n            <WebRTCVideo videoName=\"Remote\" videoRef={this.setRemoteVideoEl}/>\n          </Grid>\n        </Grid>\n        <Grid container spacing={12} justify=\"center\" className={classes.doublePadded}>\n          <Grid item xs={6}>\n            {this.renderVideoChatUIControlPanel()}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n\n  renderVideoChatUIControlPanel() {\n    const { classes } = this.props;\n  \n    return (\n      <Card>\n        <CardContent>  \n          <Grid container spacing={12} justify=\"space-evenly\" alignItems=\"center\">\n            <Grid item xs={4} className={classes.controlPanelBtnContainer}>\n              <Button variant=\"contained\" color=\"primary\" className={classes.controlPanelBtn} onClick={() => this.handleCallStart()}>\n                Call <Icon className={classes.controlPanelBtnIcon}>call</Icon>\n              </Button>\n            </Grid>\n            <Grid item xs={4} className={classes.controlPanelBtnContainer}>\n              <Button variant=\"contained\" color=\"primary\" className={classes.controlPanelBtn} onClick={() => this.handleCallEnd()}>\n                End Call <Icon className={classes.controlPanelBtnIcon}>call_end</Icon>\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  render() {\n    return (!this.state.isServerSet ? this.renderSetServerUI() : this.renderVideoChatUI());\n  }\n}\n\nexport default withStyles(styles)(WebRTCWithServerTab);\n","const ICE_CONFIGURATION = {\n  iceServers: [\n    {urls: 'stun:stun.l.google.com:19302'}\n  ]\n};\n\n// const SOCKET_URL = 'http://localhost:8080';\n\nexport default class WebRTCConnectionManager {\n  constructor() {\n    this.rtcConnection = new RTCPeerConnection(ICE_CONFIGURATION);\n\n    this.localConnectionData = {description: null, candidates: []};\n    this.subscribers = new Set();\n\n    // this.socket = io.connect(SOCKET_URL);\n\n    this.localMediaStreamPromise = null;\n    this.remoteMediaStreamPromise = null;\n\n    this.rtcConnection.onicecandidate = this.handleIceCandidate.bind(this);\n\n    // this.socket.on('offer', this.handleOffer.bind(this));\n    // this.socket.on('answer', this.handleAnswer.bind(this));\n    // this.socket.on('ice_candidate', this.handleRemoteIceCandidate.bind(this));\n  }\n\n  subscribe(handler) {\n    this.subscribers.add(handler);\n  }\n\n  unsubscribe(handler) {\n    this.subscribers.delete(handler);\n  }\n\n  notifyAll() {\n    this.subscribers.forEach((handler) => handler(JSON.stringify(this.localConnectionData)));\n  }\n\n  async getLocalMediaStream() {\n    if (this.localMediaStreamPromise === null) {\n      this.localMediaStreamPromise = new Promise((resolve, reject) => {\n        navigator.getUserMedia(\n          {video: true},\n          (stream) => resolve(stream),\n          () => reject(new Error('Failed to get local media stream'))\n        );\n      });\n    }\n\n    return this.localMediaStreamPromise;\n  }\n\n  async getRemoteMediaStream() {\n    if (this.remoteMediaStreamPromise === null) {\n      this.remoteMediaStreamPromise = new Promise((resolve, reject) => {\n        this.rtcConnection.ontrack = ((event) => {\n          console.log('onRemoteTrack');\n          resolve(event.streams[0]);\n        });\n      });\n    }\n\n    return this.remoteMediaStreamPromise;\n  }\n\n  /* Initiate a call */\n  async createOffer() {\n    // add local media stream tracks to rtc connection\n    let localMediaStream = await this.getLocalMediaStream();\n    localMediaStream.getTracks().forEach((track) => this.rtcConnection.addTrack(track, localMediaStream));\n\n    // send an offer\n    let localDescription = await this.rtcConnection.createOffer();\n    await this.rtcConnection.setLocalDescription(localDescription);\n    this.localConnectionData.description = this.rtcConnection.localDescription;\n\n    this.notifyAll();\n    // this.socket.emit('offer', {description: this.rtcConnection.localDescription});\n  }\n\n  /* Handle an incoming call */\n  async handleOffer({description, candidates}) {\n    console.log(`handleOffer: ${description}`);\n\n    await this.rtcConnection.setRemoteDescription(description);\n\n    // add local media stream tracks to rtc connection\n    let localMediaStream = await this.getLocalMediaStream();\n    localMediaStream.getTracks().forEach((track) => this.rtcConnection.addTrack(track, localMediaStream));\n\n    // send an answer\n    await this.rtcConnection.setLocalDescription(await this.rtcConnection.createAnswer());\n\n    this.localConnectionData.description = this.rtcConnection.localDescription;\n    for (let i = 0; i < candidates.length; i++) {\n      await this.handleRemoteIceCandidate(candidates[i]);\n    }\n\n    this.notifyAll();\n    // this.socket.emit('answer', {description: this.rtcConnection.localDescription});\n  }\n\n  /* Handle an answer to our offer (if we initiated the call) */\n  async handleAnswer({description, candidates}) {\n    console.log(`handleAnswer: ${description}`);\n    await this.rtcConnection.setRemoteDescription(description);\n\n    this.localConnectionData.description = this.rtcConnection.localDescription;\n    for (let i = 0; i < candidates.length; i++) {\n      await this.handleRemoteIceCandidate(candidates[i]);\n    }\n  }\n\n  async handleIceCandidate({candidate}) {\n    console.log(`handleIceCandidate: ${candidate}`);\n\n    if (!candidate) return;\n    this.localConnectionData.candidates.push({candidate});\n    this.notifyAll();\n    // this.socket.emit('ice_candidate', {candidate});\n  }\n\n  async handleRemoteIceCandidate({candidate}) {\n    console.log(`handleRemoteIceCandidate: ${candidate}`);\n\n    if (!candidate) return;\n    await this.rtcConnection.addIceCandidate(candidate);\n  }\n}\n","import React, { Component } from 'react';\n\n// material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\n// web rtc stuff\nimport WebRTCVideo from '../components/WebRTCVideo';\nimport ManualWebRTCConnectionManager from '../connectionManagers/ManualWebRTCConnectionManager';\n\nconst styles = ((theme) => ({\n  root: {\n    padding: '20px',\n  },\n  videoChatContainer: {\n    paddingBottom: '30px',\n  },\n  startOrAcceptFormLabel: {\n    marginBottom: '20px',\n  },\n  offerAnswerInputContainer: {\n    width: '100%',\n    marginBottom: '30px',\n  },\n  offerAnswerInput: {\n    width: '100%'\n  },\n  doublePadded: {\n    padding: theme.spacing.unit * 2,\n  },\n}));\n\nclass WebRTCManualTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startOrAccept: null,\n      isConnected: false,\n      localConnectionData: '',\n      remoteConnectionData: '',\n    };\n\n    this.rtcConnectionManager = new ManualWebRTCConnectionManager();\n    this.rtcConnectionManager.subscribe((localConnectionData) => this.handleLocalConnectionData(localConnectionData));\n\n    // since we're using MediaStream objects need to store these as members and user refs to set the video src's\n    this.localVideoStream = null;\n    this.localVideoEl = null;\n    \n    this.remoteVideoStream = null;\n    this.remoteVideoEl = null;\n\n    this.setLocalVideoEl = this.setLocalVideoEl.bind(this);\n    this.setRemoteVideoEl = this.setRemoteVideoEl.bind(this);\n  }\n\n  setLocalVideoEl(el) {\n    this.localVideoEl = el;\n\n    this.rtcConnectionManager.getLocalMediaStream()\n      .then((mediaStream) => this.localVideoStream = mediaStream)\n      .then(() => {\n        if (this.localVideoEl) this.localVideoEl.srcObject = this.localVideoStream;\n      });\n  }\n\n  setRemoteVideoEl(el) {\n    this.remoteVideoEl = el;\n\n    this.rtcConnectionManager.getRemoteMediaStream()\n      .then((mediaStream) => this.remoteVideoStream = mediaStream)\n      .then(() => {\n        if (this.remoteVideoEl) this.remoteVideoEl.srcObject = this.remoteVideoStream;\n      });\n  }\n\n  handleLocalConnectionData(localConnectionData) {\n    this.setState({localConnectionData});\n  }\n\n  handleRemoteConnectionData(remoteConnectionData) {\n    this.setState({remoteConnectionData});\n  }\n\n  handleStartOrAcceptSelection(startOrAccept) {\n    this.setState({startOrAccept});\n    if (startOrAccept === 'start') {\n      this.rtcConnectionManager.createOffer();\n    }\n  }\n\n  handleConnectBtnClick() {\n    const remoteConnectionData = JSON.parse(this.state.remoteConnectionData);\n\n    try {\n      if (this.state.startOrAccept === 'start') {\n        this.rtcConnectionManager.handleAnswer(remoteConnectionData)\n          .then(() => this.setState({isConnected: true}));\n      } else if (this.state.startOrAccept === 'accept') {\n        this.rtcConnectionManager.handleOffer(remoteConnectionData)\n          .then(() => this.setState({isConnected: true}));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  renderSetupConnectionUI() {\n    const { startOrAccept } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid item>\n          {this.renderStartOrAcceptConnectionRadioGroup()}\n        </Grid>\n        <Grid item className={classes.offerAnswerInputContainer}>\n          {startOrAccept && this.renderOfferAnswerFields()}\n        </Grid>\n        <Grid item>\n          {startOrAccept && this.renderConnectBtn()}\n        </Grid>\n      </Grid>\n    )\n  }\n\n  renderStartOrAcceptConnectionRadioGroup() {\n    const { startOrAccept } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" className={classes.startOrAcceptFormLabel}>\n          Start or Accept a WebRTC Connection manually\n        </FormLabel>\n        <RadioGroup\n          row\n          name=\"start_or_accept\"\n          value={startOrAccept}\n          onChange={(event) => this.handleStartOrAcceptSelection(event.target.value)}\n        >\n          <FormControlLabel\n            value=\"start\"\n            control={<Radio />}\n            label=\"Start a Connection\"\n            disabled={startOrAccept !== null}\n          />\n          <FormControlLabel\n            value=\"accept\"\n            control={<Radio />}\n            label=\"Accept a Connection\"\n            disabled={startOrAccept !== null}\n          />\n        </RadioGroup>\n      </FormControl>\n    );\n  }\n\n  renderConnectBtn() {\n    const { startOrAccept, localConnectionData, remoteConnectionData, isConnected } = this.state;\n    const { classes } = this.props;\n\n    let isDisabled = true;\n    if (startOrAccept === 'start') {\n      isDisabled = (!localConnectionData || !remoteConnectionData || isConnected)\n    } else if (startOrAccept === 'accept') {\n      isDisabled = (!remoteConnectionData || isConnected);\n    }\n\n    return (\n      <Button\n        disabled={isDisabled}\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.startOrAcceptConnectBtn}\n        onClick={() => this.handleConnectBtnClick()}\n      >\n        Connect\n      </Button>\n    );\n  }\n\n  renderOfferAnswerFields() {\n    const { startOrAccept, localConnectionData, remoteConnectionData } = this.state;\n    const { classes } = this.props;\n\n    let remoteConnectionTextField = (\n      <TextField\n        label={`${startOrAccept === 'start' ? 'Answer' : 'Offer'} - Get this from your friend!`}\n        onChange={(event) => this.handleRemoteConnectionData(event.target.value)}\n        value={remoteConnectionData}\n        multiline\n        rows=\"1\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        className={classes.offerAnswerInput}\n      />\n    );\n\n    let localConnectionTextField = (\n      <TextField\n        label={`${startOrAccept === 'start' ? 'Offer' : 'Answer'} - Send this to your friend!`}\n        disabled\n        value={localConnectionData}\n        multiline\n        rows=\"1\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        className={classes.offerAnswerInput}\n      />\n    );\n\n    return (\n      <Grid container spacing={12} justify=\"space-evenly\">\n        <Grid item xs={4}>\n          {startOrAccept === 'start' && localConnectionTextField}\n          {startOrAccept === 'accept' && remoteConnectionTextField}\n        </Grid>\n        <Grid item xs={4}>\n          {startOrAccept === 'start' && remoteConnectionTextField}\n          {startOrAccept === 'accept' && localConnectionData && localConnectionTextField}\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderVideoChatUI() {\n    const { classes } = this.props;\n\n    return (\n      <Grid container spacing={12} justify=\"center\" alignItems=\"stretch\" className={classes.videoChatContainer}>\n        <Grid item xs={6} className={classes.doublePadded}>\n          <WebRTCVideo videoName=\"Local\" videoRef={this.setLocalVideoEl}/>\n        </Grid>\n        <Grid item xs={6} className={classes.doublePadded}>\n          <WebRTCVideo videoName=\"Remote\" videoRef={this.setRemoteVideoEl}/>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        {this.renderVideoChatUI()}\n        {this.renderSetupConnectionUI()}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(WebRTCManualTab);","import React, { Component } from 'react';\nimport './App.css';\n\n// material-ui\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport purple from '@material-ui/core/colors/purple';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n// web rtc stuff\nimport WebRTCWithServerTab from './tabs/WebRTCWithServerTab';\nimport WebRTCManualTab from './tabs/WebRTCManualTab';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: purple\n  },\n});\n\nconst TAB_OPTIONS = Object.freeze({\n  SERVER: 'server',\n  MANUAL: 'manual',\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentTab: TAB_OPTIONS.SERVER\n    };\n\n    this.handleTabChange = this.handleTabChange.bind(this);\n  }\n\n  handleTabChange(event, value) {\n    this.setState({currentTab: value});\n  }\n\n  render() {\n    const { currentTab } = this.state;\n\n    return (\n      <CssBaseline>\n        <MuiThemeProvider theme={theme}>\n          <div className=\"App\">\n            <AppBar position=\"static\">\n              <Tabs value={currentTab} onChange={this.handleTabChange}>\n                <Tab label=\"Connect by Server\" value={TAB_OPTIONS.SERVER}/>\n                <Tab label=\"Connect Manually\" value={TAB_OPTIONS.MANUAL}/>\n              </Tabs>\n            </AppBar>\n            {currentTab === TAB_OPTIONS.SERVER && <WebRTCWithServerTab></WebRTCWithServerTab>}\n            {currentTab === TAB_OPTIONS.MANUAL && <WebRTCManualTab></WebRTCManualTab>}\n          </div>\n        </MuiThemeProvider>\n      </CssBaseline>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'typeface-roboto';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}